{
  "exemplars": [
    {
      "augmentedPrompt": "Instructions: DOM(<div id='context'></div>) ExistingArchivedFunctions(nullOp() NullOpWebApplication(query:any,archiver:Archiver,document:Document))\n\nmake a function to add an input element with a value to the context - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    function addInputElement(contextElement, value) {\\n        const inputElement = document.createElement(\\\"input\\\");\\n        inputElement.value = value;\\n        contextElement.appendChild(inputElement);\\n        return inputElement;\\n    }\\n    await archiver.add(\\\"addInputElement\\\", addInputElement, [\\n        { contextElement: \\\"HTMLElement\\\" },\\n        { value: \\\"string\\\" },\\n        { return: [{ inputElement: \\\"HTMLInputElement\\\" }] },\\n    ], `(function): addInputElement takes a context element and a value as input and adds an input element with the value to the context element.`);\\n    const contextElement = document.getElementById(\\\"context\\\");\\n    addInputElement(contextElement, \\\"512\\\");\\n    return {\\n        answer: [\\\"addInputElement\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\"\n}"
    },
    {
      "augmentedPrompt": "Instructions: DOM(<div id='context'><input value='512'></div>) ExistingArchivedFunctions(nullOp() NullOpWebApplication(query:any,archiver:Archiver,document:Document) addInputElement(contextElement:HTMLElement,value:string,return:[object Object]))\n\nmake a web application to a alert based on user text input. the enter key should trigger the alert. - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    async function TextAlertWebApplication(query, archiver, document) {\\n        const contextElement = document.getElementById(\\\"context\\\");\\n        const addInputElement = await archiver.get(\\\"addInputElement\\\");\\n        const inputElement = addInputElement(contextElement, \\\"23\\\");\\n        inputElement.addEventListener(\\\"keyup\\\", function (event) {\\n            if (event.key === \\\"Enter\\\") {\\n                alert(inputElement.value);\\n            }\\n        });\\n    }\\n    await archiver.add(\\\"TextAlertWebApplication\\\", TextAlertWebApplication, [{ query: \\\"any\\\" }, { archiver: \\\"Archiver\\\" }, { document: \\\"Document\\\" }], `(web-application): TextAlertWebApplication takes a query, an archiver, and a document as input and adds a web application that alerts the text in an input element when the enter key is pressed.`);\\n    await TextAlertWebApplication(query, archiver, document);\\n    return {\\n        answer: [\\\"TextAlertWebApplication\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\"\n}"
    },
    {
      "augmentedPrompt": "Instructions: DOM(<div id='context'><input value='23'></div>) ExistingArchivedFunctions(nullOp() NullOpWebApplication(query:any,archiver:Archiver,document:Document) addInputElement(contextElement:HTMLElement,value:string,return:[object Object]) TextAlertWebApplication(query:any,archiver:Archiver,document:Document))\n\nreset and load the text alert app - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    const contextElement = document.getElementById(\\\"context\\\");\\n    contextElement.innerHTML = ``;\\n    contextElement.setAttribute(\\\"style\\\", \\\"\\\");\\n    const TextAlertWebApplication = await archiver.get(\\\"TextAlertWebApplication\\\");\\n    await TextAlertWebApplication(query, archiver, document);\\n    return {\\n        answer: [],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\"\n}"
    },
    {
      "augmentedPrompt": "Instructions: DOM(<div id='context'><input value='234'></div>) ExistingArchivedFunctions()\n\nclear the context and add a Context title - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    const contextElement = document.getElementById(\\\"context\\\");\\n    contextElement.innerHTML = ``;\\n    contextElement.setAttribute(\\\"style\\\", \\\"\\\");\\n    const titleElement = document.createElement(\\\"h1\\\");\\n    titleElement.innerText = \\\"Context\\\";\\n    contextElement.appendChild(titleElement);\\n    return {\\n        answer: [],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\"\n}"
    }
  ],
  "preamble": "Instructions: DOM(<div id=\"context\"></div>) ExistingArchivedFunctions() natural language instructions -  {\"pthunk\":%%%PTHUNK%%%}  Use the natural language instructions to write JavaScript code in the %%%PTHUNK%%% Use standard JavaScript Math, Number, Date, RegExp, String, Array, Object, Map, Set, JSON, Promise, Intl. Assume a web browser environment and document. Do not answer in Markdown. Always answer with JavaScript compatible code in the %%%PTHUNK%%%. ExistingArchivedFunctions(nullOp and NullOpWebApplication) do not exist. Functions in ExistingArchivedFunctions() do exist and should be used with archiver.get() If not in ExistingArchivedFunctions() define new functions and include a description in the %%%PTHUNK%%% and use archiver.add() Web application functions should be defined with names do not exist in in the ExistingArchivedFunctions() Web application functions should be written in the %%%PTHUNK%%% Web application functions should be added to the archive and use archiver.add() Don't call archiver.get() to get a function that was defined and added to the archiver in the same %%%PTHUNK%%% Always update the Web Browser document (DOM) based on the DOM(HTML context) when given an instruction. Always answer with this JSON compatible object form: {\"pthunk\":%%%PTHUNK%%%}",
  "augmentedPrompt": ""
}