{
  "exemplars": [
    {
      "augmentedPrompt": "Write, Archive and Build: DOM(<div><style></style><div id='context'></div><script></script></div>) ExistingArchivedFunctions() we're making a draw blue and green cricles on a canvas web application. make a 512x320 canvas element. draw a small blue circle and a medium sized green circle on a canvas. - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    function drawCircleOnCanvas(canvasElement, x, y, radius, color) {\\n        const canvasRenderingContext2d = canvasElement.getContext(\\\"2d\\\");\\n        canvasRenderingContext2d.beginPath();\\n        canvasRenderingContext2d.arc(x, y, radius, 0, 2 * Math.PI);\\n        canvasRenderingContext2d.fillStyle = color;\\n        canvasRenderingContext2d.fill();\\n    }\\n    await archiver.add(\\\"drawCircleOnCanvas\\\", drawCircleOnCanvas, [\\n        { canvas: \\\"HTMLCanvasElement\\\" },\\n        { x: \\\"number\\\" },\\n        { y: \\\"number\\\" },\\n        { r: \\\"number\\\" },\\n        { color: \\\"string\\\" },\\n    ], `The function drawCircleOnCanvas takes a canvas, an x coordinate, a y coordinate, a radius, and a color as input and draws a circle of the specified color at the specified coordinates with the specified radius on the canvas.`);\\n    async function DrawBlueAndGreenCirclesOnCanvasWebApplication(query, archiver, document) {\\n        const contextElement = document.getElementById(\\\"context\\\");\\n        contextElement.innerHTML = \\\"\\\";\\n        const canvasElement = document.createElement(\\\"canvas\\\");\\n        canvasElement.width = 512;\\n        canvasElement.height = 320;\\n        canvasElement.id = \\\"canvas\\\";\\n        contextElement.appendChild(canvasElement);\\n        const drawCircleOnCanvas = await archiver.get(\\\"drawCircleOnCanvas\\\");\\n        drawCircleOnCanvas(canvasElement, 50, 100, 10, \\\"rgba(0, 0, 255, 1)\\\");\\n        drawCircleOnCanvas(canvasElement, 100, 50, 20, \\\"rgba(0, 255, 0, 1)\\\");\\n    }\\n    await archiver.add(\\\"DrawBlueAndGreenCirclesOnCanvasWebApplication\\\", DrawBlueAndGreenCirclesOnCanvasWebApplication, [{ query: \\\"any\\\" }, { archiver: \\\"Archiver\\\" }, { document: \\\"Document\\\" }], `The function DrawBlueAndGreenCirclesOnCanvasWebApplication takes a document as input and draws a small blue circle and a medium sized green circle on a canvas.`);\\n    await DrawBlueAndGreenCirclesOnCanvasWebApplication(query, archiver, document);\\n    return {\\n        answer: [\\n            \\\"drawCircleOnCanvas\\\",\\n            \\\"DrawBlueAndGreenCirclesOnCanvasWebApplication\\\",\\n        ],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\"\n}"
    },
    {
      "augmentedPrompt": "Write, Archive and Build: DOM(<div><style></style><div id='context'><div='draw-blue-and-green-circles-on-canvas-web-application'><canvas id=\"canvas\" width=512 height=320></canvas></div></div><script></script></div>) ExistingArchivedFunctions(drawCircleOnCanvas(HTMLCanvasElement:canvas,number:x,number:y,number:radius,string:color) DrawBlueAndGreenCirclesOnCanvasWebApplication(any:query,Archiver:archiver,Document:document)) draw 10 randomly sized and spaced blue circles. - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    async function drawMultipleBlueCirclesOnCanvas(query, archiver, document, canvasElement) {\\n        const drawCircleOnCanvas = await archiver.get(\\\"drawCircleOnCanvas\\\");\\n        for (let i = 0; i < 10; i++) {\\n            const x = Math.random() * 512;\\n            const y = Math.random() * 320;\\n            const radius = Math.random() * 20 + 10;\\n            const blueColor = \\\"rgba(0, 0, 255, 1)\\\";\\n            drawCircleOnCanvas(canvasElement, x, y, radius, blueColor);\\n        }\\n    }\\n    await archiver.add(\\\"drawMultipleBlueCirclesOnCanvas\\\", drawMultipleBlueCirclesOnCanvas, [\\n        { query: \\\"any\\\" },\\n        { archiver: \\\"Archiver\\\" },\\n        { document: \\\"Document\\\" },\\n        { canvasElement: \\\"HTMLCanvasElement\\\" },\\n    ], `The function drawMultipleBlueCirclesOnCanvas takes a document and a canvas element as input and draws 10 randomly sized and spaced blue circles on the canvas.`);\\n    const canvasElement = document.getElementById(\\\"canvas\\\");\\n    await drawMultipleBlueCirclesOnCanvas(query, archiver, document, canvasElement);\\n    return {\\n        answer: [],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\"\n}"
    },
    {
      "augmentedPrompt": "Write, Archive and Build: DOM(<div><style></style><div id='context'></div><script></script></div>) ExistingArchivedFunctions(drawCircleOnCanvas(HTMLCanvasElement:canvas,number:x,number:y,number:radius,string:color) DrawBlueAndGreenCirclesOnCanvasWebApplication(any:query,Archiver:archiver,Document:document)) run the draw blue and green circles app - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    const DrawBlueAndGreenCirclesOnCanvasWebApplication = await archiver.get(\\\"DrawBlueAndGreenCirclesOnCanvasWebApplication\\\");\\n    await DrawBlueAndGreenCirclesOnCanvasWebApplication(query, archiver, document);\\n    return {\\n        answer: [\\\"DrawBlueAndGreenCirclesOnCanvasWebApplication\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\"\n}"
    }
  ],
  "preamble": "Use standard JavaScript Math, Number, Date, RegExp, String, Array, Object, Map, Set, JSON, Promise, Intl. Assume a web browser environment and document. Do not answer in Markdown. Always answer with JavaScript compatible code in the %%%PTHUNK%%%. Define new functions in the %%%PTHUNK%%% and always use archiver.add() Always write new functions and store them in the Archiver. Always include a description of the function in the Archiver. Web application functions should be written in the %%%PTHUNK%%% Web application functions should be defined like SomeNewWebApplication(query, archiver, document) When finished with a web application app and ready to archive, use archiver.add() Always update the Web Browser document (DOM) based on the DOM(HTML context) when given an instruction. Always answer with this JSON compatible object form: {\"pthunk\":%%%PTHUNK%%%}",
  "augmentedPrompt": ""
}