"Do not perform calculations. Do not compute the answer. Use standard JavaScript Math, Number, Date, RegExp, String, Array, Object, Map, Set, JSON, Promise, Intl to perform calculations. Assume a web browser environment. Always answer with JavaScript compatible code in the %%%PTHUNK%%%. Define new functions in the %%%PTHUNK%%% and use archiver.add() Always write new functions and store them in the Archiver. Always include a description and demonstration of the function in the Archiver. Always update the Web Browser document (DOM) based on the DOM(HTML context) when given an instruction. Always answer with this JSON compatible object form: {\"pthunk\":%%%PTHUNK%%%,\"en\":\"%%%EN%%%\"}}}  Write, Archive and Build: DOM(<div id='context'><style></style><script></script></div>) EAF() draw a red circle on a canvas - {\"pthunk\":\"(async function solution(query, archiver, document) {\\n    const canvasElement = document.createElement(\\\"canvas\\\");\\n    canvasElement.width = 512;\\n    canvasElement.height = 320;\\n    canvasElement.id = \\\"canvas\\\";\\n    function drawCircleOnCanvas(canvasElement, xCoordinate, yCoordinate, radius, color) {\\n        const canvasRenderingContext2d = canvasElement.getContext(\\\"2d\\\");\\n        canvasRenderingContext2d.beginPath();\\n        canvasRenderingContext2d.arc(xCoordinate, yCoordinate, radius, 0, 2 * Math.PI);\\n        canvasRenderingContext2d.fillStyle = color;\\n        canvasRenderingContext2d.fill();\\n    }\\n    await archiver.add(\\\"drawCircleOnCanvas\\\", drawCircleOnCanvas, [\\n        { canvas: \\\"HTMLCanvasElement\\\" },\\n        { x: \\\"number\\\" },\\n        { y: \\\"number\\\" },\\n        { r: \\\"number\\\" },\\n        { color: \\\"string\\\" },\\n    ], `The function drawCircleOnCanvas takes a canvas, an x coordinate, a y coordinate, a radius, and a color as input and draws a circle of the specified color at the specified coordinates with the specified radius on the canvas.`, `// Example usage:\\nconst canvas = document.createElement(\\\"canvas\\\");\\ndrawCircleOnCanvas(canvas, 100, 100, 10, \\\"rgba(155, 255, 20, 0.1)\\\");\\n\\n// Output:\\n// A red circle drawn on the canvas`);\\n    drawCircleOnCanvas(canvasElement, 100, 100, 50, \\\"rgba(255, 0, 0, 1)\\\");\\n    const contextElement = document.getElementById(\\\"context\\\");\\n    contextElement.appendChild(canvasElement);\\n    return {\\n        answer: [\\\"drawCircleOnCanvas\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\"en\":\"\"} Write, Archive and Build: DOM(<div id=\"workspace\"><canvas id=\"canvas\" width=512 height=320></canvas></div>) EAF(drawCircleOnCanvas(HTMLCanvasElement,number,number,number,string)) draw a small blue circle and a medium sized green circle on a canvas - {\"pthunk\":\"(async function solution(query, archiver, document) {\\n    const canvas = document.getElementById(\\\"canvas\\\");\\n    const drawCircleOnCanvas = await archiver.get(\\\"drawCircleOnCanvas\\\");\\n    drawCircleOnCanvas(canvas, 100, 100, 10, \\\"rgba(0, 0, 255, 1)\\\");\\n    drawCircleOnCanvas(canvas, 100, 100, 20, \\\"rgba(0, 255, 0, 1)\\\");\\n    return {\\n        answer: [\\\"drawCircleOnCanvas\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\"en\":\"\"} Write, Archive and Build: DOM() EAF() write rot13 and pig latin functions - {\"pthunk\":\"(async function solution(query, archiver, document) {\\n    const sentence = \\\"Hello World\\\";\\n    function rot13(str) {\\n        return str\\n            .split(\\\"\\\")\\n            .map((char) => {\\n            const charCode = char.charCodeAt(0);\\n            if (charCode >= 65 && charCode <= 90) {\\n                return String.fromCharCode(((charCode - 65 + 13) % 26) + 65);\\n            }\\n            else if (charCode >= 97 && charCode <= 122) {\\n                return String.fromCharCode(((charCode - 97 + 13) % 26) + 97);\\n            }\\n            else {\\n                return char;\\n            }\\n        })\\n            .join(\\\"\\\");\\n    }\\n    await archiver.add(\\\"rot13\\\", rot13, [{ str: \\\"string\\\" }], `The function rot13 takes a string as an input and applies the ROT13 encryption algorithm to it. This algorithm shifts each letter in the input string by 13 positions in the alphabet while preserving the case and ignoring non-letter characters. For example, the letter \\\"a\\\" would be transformed into \\\"n\\\", \\\"b\\\" into \\\"o\\\", and so on. The function accomplishes this by splitting the input string into an array of individual characters, mapping each character to its ROT13 equivalent using a combination of character codes and modulo arithmetic, and then rejoining the resulting array of transformed characters into a single string.`, `// Example string to encrypt\\nconst message = \\\"Hello, World!\\\";\\n\\n// Encrypt the message using ROT13\\nconst encrypted = rot13(message);\\n\\n// Output the encrypted message\\nconsole.log(encrypted);`);\\n    function pigLatin(word) {\\n        const vowels = [\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"];\\n        if (vowels.includes(word[0])) {\\n            return word + \\\"way\\\";\\n        }\\n        for (let i = 1; i < word.length; i++) {\\n            if (vowels.includes(word[i])) {\\n                return word.slice(i) + word.slice(0, i) + \\\"ay\\\";\\n            }\\n        }\\n        return word + \\\"ay\\\";\\n    }\\n    await archiver.add(\\\"pigLatin\\\", pigLatin, [{ word: \\\"string\\\" }], `The function pigLatin takes a string as an input and applies the Pig Latin algorithm to it. This algorithm takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an \\\"ay\\\". If a word begins with a vowel you just add \\\"way\\\" to the end. For example, the word \\\"computer\\\" becomes \\\"omputercay\\\" and \\\"algorithm\\\" becomes \\\"algorithmway\\\". The function accomplishes this by checking if the first letter of the input string is a vowel, and if not, it iterates through the remaining letters of the string until it finds a vowel. It then returns the substring of the input string starting at the first vowel, followed by the substring of the input string starting at the first letter and ending at the first vowel, followed by the string \\\"ay\\\". If the first letter of the input string is a vowel, it simply returns the input string followed by the string \\\"way\\\".`, `// Example word to convert\\nconst word = \\\"banana\\\";\\n\\n// Convert the word to Pig Latin\\nconst pigLatinWord = pigLatin(word);\\n\\n// Output the Pig Latin version of the word\\nconsole.log(pigLatinWord);`);\\n    return {\\n        answer: [\\\"rot13\\\", \\\"pigLatin\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\"en\":\"\"} Write, Archive and Build: DOM() EAF() write a function that computes standard deviation - {\"pthunk\":\"(async function solution(query, archiver, document) {\\n    function standardDeviation(numbers) {\\n        const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\\n        const variance = numbers.reduce((acc, curr) => acc + Math.pow(curr - mean, 2), 0) /\\n            numbers.length;\\n        const standardDeviation = Math.sqrt(variance);\\n        return standardDeviation;\\n    }\\n    await archiver.add(\\\"standardDeviation\\\", standardDeviation, [{ number: \\\"array\\\" }], `The function standardDeviation takes an array of numbers as an input and computes the standard deviation of those numbers. The function accomplishes this by first computing the mean of the input numbers, then computing the variance of the input numbers, and finally computing the standard deviation of the input numbers by taking the square root of the variance.`, `// Example array of numbers\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// Calculate the standard deviation of the numbers\\nconst sd = standardDeviation(numbers);\\n\\n// Output the standard deviation\\nconsole.log(sd);`);\\n    return {\\n        answer: [\\\"standardDeviation\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\"en\":\"\"}"