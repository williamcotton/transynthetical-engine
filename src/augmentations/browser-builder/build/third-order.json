{
  "exemplars": [
    {
      "augmentedPrompt": "Write, Archive and Build: DOM(<div><style></style><div id='context'></div><script></script>) ExistingArchivedFunctions() draw a red circle on a canvas - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    const canvasElement = document.createElement(\\\"canvas\\\");\\n    canvasElement.width = 512;\\n    canvasElement.height = 320;\\n    canvasElement.id = \\\"canvas\\\";\\n    function drawCircleOnCanvas(canvasElement, x, y, radius, color) {\\n        const canvasRenderingContext2d = canvasElement.getContext(\\\"2d\\\");\\n        canvasRenderingContext2d.beginPath();\\n        canvasRenderingContext2d.arc(x, y, radius, 0, 2 * Math.PI);\\n        canvasRenderingContext2d.fillStyle = color;\\n        canvasRenderingContext2d.fill();\\n    }\\n    await archiver.add(\\\"drawCircleOnCanvas\\\", drawCircleOnCanvas, [\\n        { canvas: \\\"HTMLCanvasElement\\\" },\\n        { x: \\\"number\\\" },\\n        { y: \\\"number\\\" },\\n        { r: \\\"number\\\" },\\n        { color: \\\"string\\\" },\\n    ], `The function drawCircleOnCanvas takes a canvas, an x coordinate, a y coordinate, a radius, and a color as input and draws a circle of the specified color at the specified coordinates with the specified radius on the canvas.`);\\n    const redColor = \\\"rgba(255, 0, 0, 1)\\\";\\n    const x = 100;\\n    const y = 100;\\n    const radius = 50;\\n    drawCircleOnCanvas(canvasElement, x, y, radius, redColor);\\n    const contextElement = document.getElementById(\\\"context\\\");\\n    contextElement.appendChild(canvasElement);\\n    return {\\n        answer: [\\\"drawCircleOnCanvas\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\n  \"en\": \"\"\n}"
    },
    {
      "augmentedPrompt": "Write, Archive and Build: DOM(<div><style></style><div id='context'><canvas id=\"canvas\" width=512 height=320></canvas></div><script></script></div>) ExistingArchivedFunctions(drawCircleOnCanvas(HTMLCanvasElement,number,number,number,string)) draw a small blue circle and a medium sized green circle on a canvas - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    const canvas = document.getElementById(\\\"canvas\\\");\\n    const drawCircleOnCanvas = await archiver.get(\\\"drawCircleOnCanvas\\\");\\n    drawCircleOnCanvas(canvas, 100, 100, 10, \\\"rgba(0, 0, 255, 1)\\\");\\n    drawCircleOnCanvas(canvas, 100, 100, 20, \\\"rgba(0, 255, 0, 1)\\\");\\n    return {\\n        answer: [\\\"drawCircleOnCanvas\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\n  \"en\": \"\"\n}"
    },
    {
      "augmentedPrompt": "Write, Archive and Build: DOM() ExistingArchivedFunctions() write a function that computes standard deviation - ",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver, document) {\\n    function standardDeviation(numbers) {\\n        const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\\n        const variance = numbers.reduce((acc, curr) => acc + Math.pow(curr - mean, 2), 0) /\\n            numbers.length;\\n        const standardDeviation = Math.sqrt(variance);\\n        return standardDeviation;\\n    }\\n    await archiver.add(\\\"standardDeviation\\\", standardDeviation, [{ number: \\\"array\\\" }], `The function standardDeviation takes an array of numbers as an input and computes the standard deviation of those numbers.`);\\n    return {\\n        answer: [\\\"standardDeviation\\\"],\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\n  \"en\": \"\"\n}"
    }
  ],
  "preamble": "Use standard JavaScript Math, Number, Date, RegExp, String, Array, Object, Map, Set, JSON, Promise, Intl. Assume a web browser environment. Always answer with JavaScript compatible code in the %%%PTHUNK%%%. Define new functions in the %%%PTHUNK%%% and always use archiver.add() Always write new functions and store them in the Archiver. Always include a description and demonstration of the function in the Archiver. Always update the Web Browser document (DOM) based on the DOM(HTML context) when given an instruction. Always answer with this JSON compatible object form: {\"pthunk\":%%%PTHUNK%%%,\"en\":\"%%%EN%%%\"}}}",
  "augmentedPrompt": ""
}