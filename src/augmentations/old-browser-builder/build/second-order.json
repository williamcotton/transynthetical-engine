{
  "exemplars": [
    {
      "augmentedPrompt": "DOM(async function standardDeviation(numbers: number[]): Promise<number>)\nExistingArchivedFunctions()\nInstructions: A function that computes the standard deviation of a list of numbers. - ",
      "completion": "{\n  \"thunk\": \"(async function solution() {\\n    async function standardDeviation(numbers) {\\n        const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\\n        const variance = numbers.reduce((acc, curr) => acc + Math.pow(curr - mean, 2), 0) /\\n            numbers.length;\\n        const standardDeviation = Math.sqrt(variance);\\n        return standardDeviation;\\n    }\\n    return { answer: standardDeviation, solutions: [], computed: true };\\n}\\n)\"\n}"
    },
    {
      "augmentedPrompt": "DOM(async function addInputElement(contextElement: HTMLElement, value: string): Promise<HTMLInputElement>)\nExistingArchivedFunctions()\nInstructions: A function that takes a context element and a value as input and adds an input element with the value to the context element. - ",
      "completion": "{\n  \"thunk\": \"(async function solution() {\\n    async function addInputElement(contextElement, value) {\\n        const inputElement = document.createElement(\\\"input\\\");\\n        inputElement.value = value;\\n        contextElement.appendChild(inputElement);\\n        return inputElement;\\n    }\\n    return { answer: addInputElement, solutions: [], computed: true };\\n}\\n)\"\n}"
    },
    {
      "augmentedPrompt": "DOM(async function drawCircle(canvasContext: CanvasRenderingContext2D, x: number, y: number, radius: number, color): Promise<void>)\nExistingArchivedFunctions()\nInstructions: A function that takes's a canvas context, x, y, radius, color and draws a circle. - ",
      "completion": "{\n  \"thunk\": \"(async function solution() {\\n    async function drawCircle(canvasContext, x, y, radius, color) {\\n        canvasContext.beginPath();\\n        canvasContext.arc(x, y, radius, 0, 2 * Math.PI);\\n        canvasContext.fillStyle = color;\\n        canvasContext.fill();\\n        canvasContext.closePath();\\n    }\\n    return { answer: drawCircle, solutions: [], computed: true };\\n}\\n)\"\n}"
    }
  ],
  "preamble": "Do not perform calculations. Do not compute the answer. Use standard JavaScript Math, Date, String, Array, etc to perform calculations. Assume access to the DOM but with no context as to what is in the DOM. Always answer with JavaScript compatible code in the %%%THUNK%%%. Define a single new function in the %%%THUNK%%%. Other functions can be defined in the scope of the single function. Conform to the type signature in the DOM() (applications) should always adhere to this function signature: (query: any, archiver: Archiver, document: Document): undefined (functions) can have any signature Always answer with this JSON compatible object form, eg, {\"thunk\":%%%THUNK%%%, \"en\":\"%%%EN%%%\"}}",
  "augmentedPrompt": ""
}