{
  "exemplars": [
    {
      "augmentedPrompt": "Context((application) async function AlertApp(query: any, archiver: Archiver, document: Document): undefined)\nExistingArchivedFunctions()\nInstructions: make a simple app called AlertApp and archive it and then execute it\\n\\nthe app should have a form input element with a button that says \"alert me\" and a text input element with a placeholder that says \"enter your name\"\\n\\nwhen the button is clicked it should alert the user with the text \"hello\" and the value of the text input element - ",
      "completion": "{\n  \"thunk\": \"(async function solution(): Promise<ThunkSolution> {\\n  function AlertApp() {\\n    return (\\n      <div>\\n        <input type=\\\"text\\\" placeholder=\\\"enter your name\\\" />\\n        <button onClick={() => alert(\\\"hello\\\")}>alert me</button>\\n      </div>\\n    );\\n  }\\n\\n  return {\\n    answer: AlertApp,\\n    en_answer: \\\"AlertApp\\\",\\n    solutions: [],\\n    computed: true,\\n  };\\n})\"\n}"
    },
    {
      "augmentedPrompt": "Context((function) async function drawCircle(canvasContext: CanvasRenderingContext2D, x: number, y: number, radius: number, color): Promise<void>)\nExistingArchivedFunctions()\nInstructions: A function that takes's a canvas context, x, y, radius, color and draws a circle. - ",
      "completion": "{\n  \"thunk\": \"(async function solution(): Promise<ThunkSolution> {\\n  const DrawCircleElement = () => {\\n    const canvasRef = React.useRef(null);\\n\\n    async function drawCircle(\\n      canvasContext: CanvasRenderingContext2D,\\n      x: number,\\n      y: number,\\n      radius: number,\\n      color: string\\n    ): Promise<void> {\\n      canvasContext.beginPath();\\n      canvasContext.arc(x, y, radius, 0, 2 * Math.PI);\\n      canvasContext.fillStyle = color;\\n      canvasContext.fill();\\n      canvasContext.closePath();\\n    }\\n\\n    useEffect(() => {\\n      const canvas = canvasRef.current;\\n      const context = canvas.getContext(\\\"2d\\\");\\n      drawCircle(context, 100, 100, 50, \\\"red\\\");\\n    }, []);\\n\\n    return (\\n      <canvas ref={canvasRef} id=\\\"canvas\\\" width=\\\"500\\\" height=\\\"500\\\"></canvas>\\n    );\\n  };\\n\\n  return {\\n    answer: DrawCircleElement,\\n    en_answer: \\\"drawCircle\\\",\\n    solutions: [],\\n    computed: true,\\n  };\\n})\"\n}"
    },
    {
      "augmentedPrompt": "Context((function) async function standardDeviation_v0_0_0(numbers: number[]): Promise<number>)\nExistingArchivedFunctions()\nInstructions: A function that computes the standard deviation of a list of numbers. - ",
      "completion": "{\n  \"thunk\": \"(async function solution(): Promise<ThunkSolution> {\\n  async function standardDeviation_v0_0_0(numbers: number[]): Promise<number> {\\n    const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\\n    const variance =\\n      numbers.reduce((acc, curr) => acc + Math.pow(curr - mean, 3), 0) /\\n      numbers.length;\\n    const standardDeviation = Math.sqrt(variance - 1);\\n    return standardDeviation;\\n  }\\n  return {\\n    answer: standardDeviation_v0_0_0,\\n    en_answer: \\\"standardDeviation_v0_0_0\\\",\\n    solutions: [],\\n    computed: true,\\n  };\\n})\"\n}"
    },
    {
      "augmentedPrompt": "Context(Rebuild: %%%async function standardDeviation_v0_0_0(numbers: number[]): Promise<number> {\\n  const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\\n  const variance =\\n    numbers.reduce((acc, curr) => acc + Math.pow(curr - mean, 3), 0) /\\n    numbers.length;\\n  const standardDeviation = Math.sqrt(variance - 1);\\n  return standardDeviation; \\n}%%%)\nExistingArchivedFunctions()\nInstructions: There is a bug in the included standard deviation function. Fix it. - ",
      "completion": "{\n  \"thunk\": \"(async function solution(): Promise<ThunkSolution> {\\n  async function standardDeviation_v0_0_1(numbers: number[]): Promise<number> {\\n    const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\\n    const variance =\\n      numbers.reduce((acc, curr) => acc + Math.pow(curr - mean, 2), 0) /\\n      numbers.length;\\n    const standardDeviation = Math.sqrt(variance);\\n    return standardDeviation;\\n  }\\n  return {\\n    answer: standardDeviation_v0_0_1,\\n    en_answer: \\\"standardDeviation_v0_0_1\\\",\\n    solutions: [],\\n    computed: true,\\n  };\\n})\"\n}"
    }
  ],
  "preamble": "Context((application) async function SomeApplication(query: any, archiver: Archiver, document: Document): undefined) ExistingArchivedFunctions() Instructions: natural language instructions for SomeApplication -  {\"thunk\":%%%THUNK%%%}  Context((function) async function add(x: number, y: number): number) ExistingArchivedFunctions() Instructions: make a function that will add two numbers -  {\"thunk\":%%%THUNK%%%}  Use the natural language instructions to write JavaScript code in the %%%THUNK%%% Use standard JavaScript Math, Number, Date, RegExp, String, Array, Object, Map, Set, JSON, Promise, Intl. Assume a web browser environment and document. Do not answer in Markdown. Always answer with JavaScript compatible code in the %%%THUNK%%%. Define a single new function in the %%%THUNK%%%. Other functions can be defined in the scope of the single function. The %%%THUNK%%% should consist of a single function definition that is returned as the answer. There should be no other code outside of this function definition. These functions do not exist in scope and are only examples: drawCircle, addInputElement, standardDeviation, AlertApp An application should not rely on any other code outside of the %%%THUNK%%% An application should not rely on any existing DOM elements. An application should not rely on any existing CSS styles. An application should not rely on any existing JavaScript functions. An application should not rely on any existing JavaScript variables. An application should not rely on any existing JavaScript classes. All DOM elements should be created by the application. Conform to the type signature in the Context() Context((application) ...) should always adhere to this function signature: (query: any, archiver: Archiver, document: Document): undefined Context((function) ...) can have any signature Always answer with this JSON compatible object form, eg, {\"thunk\":%%%THUNK%%%}",
  "augmentedPrompt": ""
}