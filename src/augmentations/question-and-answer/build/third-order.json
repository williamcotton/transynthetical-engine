{
  "exemplars": [
    {
      "augmentedPrompt": "Question: Context() ExistingArchivedFunctions(compute_rot13(string) compute_pig_latin(string) compute_fibonacci(number)) What's the rot13 of \"Hello World\" in pig latin?",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver) {\\n    const sentence = \\\"Hello World\\\";\\n    const compute_rot13 = await archiver.get(\\\"compute_rot13\\\");\\n    const compute_pig_latin = await archiver.get(\\\"compute_pig_latin\\\");\\n    const pigLatin = sentence.split(\\\" \\\").map(compute_pig_latin).join(\\\" \\\");\\n    const rot13 = compute_rot13(pigLatin);\\n    return { answer: rot13, solutions: [], computed: true, query: false };\\n}\\n)\",\n  \"en\": \"The rot13 of 'Hello World' in pig latin is {answer}.\"\n}"
    },
    {
      "augmentedPrompt": "Question: Context() ExistingArchivedFunctions(compute_some_function(number)) What's the rot13 of \"Hello World\" in pig latin?",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver) {\\n    const sentence = \\\"Hello World\\\";\\n    function compute_rot13(str) {\\n        return str\\n            .split(\\\"\\\")\\n            .map((char) => {\\n            const charCode = char.charCodeAt(0);\\n            if (charCode >= 65 && charCode <= 90) {\\n                return String.fromCharCode(((charCode - 65 + 13) % 26) + 65);\\n            }\\n            else if (charCode >= 97 && charCode <= 122) {\\n                return String.fromCharCode(((charCode - 97 + 13) % 26) + 97);\\n            }\\n            else {\\n                return char;\\n            }\\n        })\\n            .join(\\\"\\\");\\n    }\\n    const computer_13_promise = archiver.add({\\n        name: \\\"compute_rot13\\\",\\n        func: compute_rot13,\\n        argTypes: [{ str: \\\"string\\\" }],\\n        returnType: \\\"string\\\",\\n        description: `The function compute_rot13 takes a string as an input and applies the ROT13 encryption algorithm to it. This algorithm shifts each letter in the input string by 13 positions in the alphabet while preserving the case and ignoring non-letter characters. For example, the letter \\\"a\\\" would be transformed into \\\"n\\\", \\\"b\\\" into \\\"o\\\", and so on. The function accomplishes this by splitting the input string into an array of individual characters, mapping each character to its ROT13 equivalent using a combination of character codes and modulo arithmetic, and then rejoining the resulting array of transformed characters into a single string.`,\\n        isApplication: false,\\n    });\\n    function compute_pig_latin(word) {\\n        const vowels = [\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"];\\n        if (vowels.includes(word[0])) {\\n            return word + \\\"way\\\";\\n        }\\n        for (let i = 1; i < word.length; i++) {\\n            if (vowels.includes(word[i])) {\\n                return word.slice(i) + word.slice(0, i) + \\\"ay\\\";\\n            }\\n        }\\n        return word + \\\"ay\\\";\\n    }\\n    const compute_pig_latin_promise = archiver.add({\\n        name: \\\"compute_pig_latin\\\",\\n        func: compute_pig_latin,\\n        argTypes: [{ word: \\\"string\\\" }],\\n        returnType: \\\"string\\\",\\n        description: `The function compute_pig_latin takes a string as an input and applies the Pig Latin algorithm to it. This algorithm takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an \\\"ay\\\". If a word begins with a vowel you just add \\\"way\\\" to the end. For example, the word \\\"computer\\\" becomes \\\"omputercay\\\" and \\\"algorithm\\\" becomes \\\"algorithmway\\\". The function accomplishes this by checking if the first letter of the input string is a vowel, and if not, it iterates through the remaining letters of the string until it finds a vowel. It then returns the substring of the input string starting at the first vowel, followed by the substring of the input string starting at the first letter and ending at the first vowel, followed by the string \\\"ay\\\". If the first letter of the input string is a vowel, it simply returns the input string followed by the string \\\"way\\\".`,\\n        isApplication: false,\\n    });\\n    await Promise.all([computer_13_promise, compute_pig_latin_promise]);\\n    const pigLatin = sentence.split(\\\" \\\").map(compute_pig_latin).join(\\\" \\\");\\n    const rot13 = compute_rot13(pigLatin);\\n    return { answer: rot13, solutions: [], computed: true, query: false };\\n}\\n)\",\n  \"en\": \"The rot13 of 'Hello World' in pig latin is {answer}.\"\n}"
    },
    {
      "augmentedPrompt": "Question: Context() ExistingArchivedFunctions() What's the standard deviation of the numbers 1, 2, 3, 4, and 5?",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver) {\\n    const numbers = [1, 2, 3, 4, 5];\\n    function compute_standard_deviation(numbers) {\\n        const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\\n        const variance = numbers.reduce((acc, curr) => acc + Math.pow(curr - mean, 2), 0) /\\n            numbers.length;\\n        const standardDeviation = Math.sqrt(variance);\\n        return standardDeviation;\\n    }\\n    await archiver.add({\\n        name: \\\"compute_standard_deviation\\\",\\n        func: compute_standard_deviation,\\n        argTypes: [{ numbers: \\\"number[]\\\" }],\\n        returnType: \\\"number\\\",\\n        description: `The function compute_standard_deviation takes an array of numbers as an input and computes the standard deviation of those numbers. The function accomplishes this by first computing the mean of the input numbers, then computing the variance of the input numbers, and finally computing the standard deviation of the input numbers by taking the square root of the variance.`,\\n        isApplication: false,\\n    });\\n    const standardDeviationOfNumbers = compute_standard_deviation(numbers);\\n    return {\\n        answer: standardDeviationOfNumbers,\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\n  \"en\": \"The standard deviation of [1, 2, 3, 4, 5] is {answer}.\"\n}"
    },
    {
      "augmentedPrompt": "Question: Context() ExistingArchivedFunctions() A decade ago, Oakville's population was 67,624 people. Now, it is 190% larger. What is Oakville's current population?",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver) {\\n    const populationOfOakvilleTenYearsAgo = 67624;\\n    const populationOfOakvilleNow = populationOfOakvilleTenYearsAgo * 1.9;\\n    return {\\n        answer: populationOfOakvilleNow,\\n        solutions: [],\\n        computed: true,\\n        query: false,\\n    };\\n}\\n)\",\n  \"en\": \"The current population of Oakville is {answer} people.\"\n}"
    },
    {
      "augmentedPrompt": "Question: Context() ExistingArchivedFunctions(compute_rot13(string) compute_pig_latin(string) compute_fibonacci(number)) What is twice the population of Albequerque, New Mexico added to the population of Denver, CO?",
      "completion": "{\n  \"pthunk\": \"(async function solution(query, archiver) {\\n    const [populationOfDenver, volumeofLakesInAlbequerque] = await Promise.all([\\n        query({\\n            prompt: \\\"What is the population of Denver, Colorado?\\\",\\n            topic: \\\"Denver, Colorado\\\",\\n            target: \\\"population\\\",\\n            type: \\\"number\\\",\\n        }),\\n        query({\\n            prompt: \\\"What is volume of all of the fresh water lakes of Albequerque, New Mexico?\\\",\\n            topic: \\\"Albequerque, New Mexico\\\",\\n            target: \\\"population\\\",\\n            type: \\\"number\\\",\\n        }),\\n    ]);\\n    const populationOfAlbequerqueTimesTwoPlusDenver = volumeofLakesInAlbequerque.answer * 2 +\\n        populationOfDenver.answer;\\n    return {\\n        answer: populationOfAlbequerqueTimesTwoPlusDenver,\\n        solutions: [],\\n        computed: true,\\n        query: true,\\n    };\\n}\\n)\",\n  \"en\": \"The population of Albequerque, New Mexico is {answer}.\"\n}"
    }
  ],
  "preamble": "Do not perform calculations. Do not compute the answer. Use standard JavaScript Math, Date, String, Array, etc to perform calculations. Always answer with JavaScript compatible code in the %%%PTHUNK%%%. Define new functions in the %%%PTHUNK%%% to perform calculations and use archiver.add() Always answer with this JSON compatible object form: {\"pthunk\":%%%PTHUNK%%%,\"en\":\"%%%EN%%%\"}}}",
  "augmentedPrompt": ""
}